;; MODIFIED FROM on http://modelingcommons.org/browse/one_model/3645#model_tabs_browse_info

turtles-own
[
  p-velocx                ;; x velocity
  p-velocy                ;; y velocity
  desired-direction ;; my desired direction
  driving-forcex    ;; my main motivating force
  driving-forcey
  obstacle-forcex   ;; force exerted by obstacles
  obstacle-forcey
  territorial-forcex;; force exerted by neighbors
  territorial-forcey
]

;; verify if the agent has arrived to its destination
to verify-arrival
  if patch-here = p-goal and patch-here != p-destination [ set p-goal first p-remain set p-remain but-first p-remain ]
  if patch-here = p-destination [ set p-out-time ticks if log? [ do-log ] die ]
end

;; find the heading towards the nearest goal
to calc-desired-direction
  set desired-direction towards p-goal
end

;; find the driving force of the turtle
to calc-driving-force
  set driving-forcex (1 / tau) * (p-veloc-max * (sin desired-direction) - p-velocx); + partial-forcesx 
  set driving-forcey (1 / tau) * (p-veloc-max * (cos desired-direction) - p-velocy); + partial-forcesy
end

;; find the territorial force according to the social forces model
to calc-territorial-forces
  set territorial-forcex 0
  set territorial-forcey 0
  ask other turtles with [distance myself > 0]
  [
    let temp check-if-collision self myself
    let to-agent (towards myself) - 180
    let rabx [xcor] of myself - xcor
    let raby [ycor] of myself - ycor
    let speed magnitude p-velocx p-velocy
    let to-root ((magnitude rabx raby) + (magnitude (rabx - (speed * sin desired-direction)) (raby - (speed * cos desired-direction)))) ^ 2 - speed ^ 2
    if to-root < 0
    [set to-root 0]
    let b 0.5 * sqrt to-root

    let agent-force (- v0) * exp (- b / sigma)

    ask myself
    [
      let agent-forcex agent-force * (sin to-agent)
      let agent-forcey agent-force * (cos to-agent)
      ;; modify the effect this force has based on whether or not it is in the field of view
      let vision field-of-view-modifier driving-forcex driving-forcey agent-forcex agent-forcey
      set territorial-forcex territorial-forcex + agent-forcex * vision
      set territorial-forcey territorial-forcey + agent-forcey * vision
    ]
  ]
end

;; find the obstacle force of the turtle according to the social forces model
to calc-obstacle-force
  set obstacle-forcex 0
  set obstacle-forcey 0
  ask patches in-radius (rd swidth) with [pcolor = 89]
  [
    let to-obstacle (towards myself) - 180
    let obstacle-force (- u0) * exp (- (distance myself) / r)
    ask myself
    [
      set obstacle-forcex obstacle-forcex + obstacle-force * (sin to-obstacle)
      set obstacle-forcey obstacle-forcey + obstacle-force * (cos to-obstacle)
    ]
  ]
  ask cars in-radius (rd 5)
  [
    let to-obstacle (towards myself) - 180
    let obstacle-force (- u0) * exp (- (distance myself) / r)
    ask myself
    [
      set obstacle-forcex obstacle-forcex + obstacle-force * (sin to-obstacle)
      set obstacle-forcey obstacle-forcey + obstacle-force * (cos to-obstacle)
    ]
  ]
end


;; helper function to find the magnitude of a vector
to-report magnitude [x y]
  report sqrt ((x ^ 2) + (y ^ 2))
end

;; returns 1 if the angle between the desired vector and the force vector is within a threshold, else return c
to-report field-of-view-modifier [desiredx desiredy forcex forcey]
  ifelse (desiredx * (- forcex) + desiredy * (- forcey)) >= (magnitude forcex forcey) * cos (360 / 2)
  [ report 1 ]
  [ report 0.1]
end

to do-log
  file-open "log.csv"
  file-print (word who "," p-origin "," p-destination "," p-veloc-max "," p-in-time "," p-out-time)
  file-close
end

;interaction with counter-flow pedestrians
;Liu, M., Zeng, W., Chen, P. & Wu, X. 
;A microscopic simulation model for pedestrian-pedestrian and pedestrian-vehicle interactions at crosswalks. 
;Plos One 12, e0180992 (2017).

to-report check-if-collision [ agent1 agent2 ] ;ttc is time to collision
  let x-1 [xcor] of agent1
  let y-1 [ycor] of agent1
  let t-1 [heading] of agent1
  let vx-1 [p-velocx] of agent1
  let vy-1 [p-velocy] of agent1
  
  let x-2 [xcor] of agent2
  let y-2 [ycor] of agent2
  let t-2 [heading] of agent2
  let vx-2 [p-velocx] of agent2
  let vy-2 [p-velocy] of agent2
  
  let x-e-n rd (x-2 - x-1) 
  let x-e-d (vx-2 * sin t-2 - vx-1 * sin t-1)
  let y-e-n rd (y-2 - y-1)
  let y-e-d (vy-2 * cos t-2 - vy-1 * cos t-1)
  
  ifelse x-e-d = 0 or y-e-d = 0 
  [ show "parallel" report nobody ]
  [ let t-x-e x-e-n / x-e-d
    let t-y-e y-e-n / y-e-d
    if t-x-e > 0 and t-y-e > 0
    [ if abs(t-x-e - t-y-e) < 0.1 and t-x-e < 60 * fps [ ]  ]
    show (word [who] of agent1 "," [who] of agent2 "," t-x-e "," t-y-e)
    report nobody
  ]
end

;; move the turtle according to the rules of the social forces model
to move-peds
  let ax driving-forcex + obstacle-forcex + territorial-forcex ;missing attractive from leading pedestrians - vehicles force - fluctuation term (fe)
  let ay driving-forcey + obstacle-forcey + territorial-forcey

  set p-velocx p-velocx + ax
  set p-velocy p-velocy + ay

  ;; scale down the velocity if it is too high
  let vmag magnitude p-velocx p-velocy
  let multiplier 1
  if vmag > p-veloc-max
  [set multiplier p-veloc-max / vmag]

  set p-velocx p-velocx * multiplier
  set p-velocy p-velocy * multiplier

  set xcor xcor + p-velocx
  set ycor ycor + p-velocy
  
  if p-velocx != 0
  [ set heading atan p-velocx p-velocy ]

end




